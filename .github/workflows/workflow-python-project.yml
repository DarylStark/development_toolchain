---
name: workflow for python project
on:
  workflow_call:
    inputs:
      python-versions:
        type: string
        description: 'List of Python versions to test against in a comma separated list. Example: ["3.9","3.10"]'
        required: true
        default: '["3.8","3.9","3.10","3.11","3.12"]'
      project-type:
        description: 'The type of project. Can be "PYTHON_POETRY".'
        required: true
        type: string
      test-suite:
        description: 'The test-suite that is being used. Can be "NONE" or "PYTEST".'
        required: true
        type: string
        default: 'NONE'
      linter-commands:
        type: string
        description: 'The linters to run'
        required: true
        default: '["ruff", "mypy"]'
      linter-folders:
        type: string
        description: 'The folders to run the linters in.'
        required: true
        default: '["src", "tests"]'


jobs:
  prepare-project:
    name: prepare project
    uses: ./.github/workflows/prepare-python.yml
    with:
      project-type: ${{ inputs.project-type }}
      python-version: ${{ matrix.python-version }}
    strategy:
      matrix:
        python-version: ${{ fromJSON(inputs.python-versions) }}
  linting:
    name: lint the python code
    needs: prepare-project
    uses: ./.github/workflows/lint-python.yml
    with:
      test-suite: ${{ inputs.test-suite }}
      python-version: ${{ matrix.python-version }}
      linter-command: ${{ matrix.linter-command }}
      linter-folder: ${{ matrix.linter-folder }}
    if: ${{ inputs.test-suite != 'NONE' }}
    strategy:
      matrix:
        python-version: ${{ fromJSON(inputs.python-versions) }}
        linter-command: ${{ fromJSON(inputs.linter-commands) }}
        linter-folder: ${{ fromJSON(inputs.linter-folders) }}
  test:
    name: run tests
    needs: prepare-project
    uses: ./.github/workflows/test-python.yml
    with:
      test-suite: ${{ inputs.test-suite }}
      python-version: ${{ matrix.python-version }}
    if: ${{ inputs.test-suite != 'NONE' }}
    strategy:
      matrix:
        python-version: ${{ fromJSON(inputs.python-versions) }}
